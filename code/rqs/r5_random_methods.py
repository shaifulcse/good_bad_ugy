# -*- coding: utf-8 -*-
"""good_bad_ugly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FdkubISuG8CL5mrmCxYdYX0ZqsXMPYgF
"""
import os
from util import utility
import pandas as pd

SRC_PATH = utility.BASE_PATH + "/data/ML/train-test/all.csv"
DEST_PATH = utility.BASE_PATH + "/data/rq5_samples/"
all_features = [
    "Project",
    "file",
    "SLOCStandard",
    "CommentCodeRation",
    "Readability",
    "SimpleReadability",
    "NVAR",
    "NCOMP",
    "McCabe",
    "IndentSTD",
    "MaximumBlockDepth",
    "totalFanOut",
    "Length",
    "MaintainabilityIndex",
    "Parameters",
    "LocalVariables",
    "Type"
]

used_features = [
    "SLOCStandard",
    "CommentCodeRation",
    "Readability",
    "SimpleReadability",
    "NVAR",
    "NCOMP",
    "McCabe",
    "IndentSTD",
    "MaximumBlockDepth",
    "totalFanOut",
    "Length",
    "MaintainabilityIndex",
    "Parameters",
    "LocalVariables"
]


def load_data():
    data = pd.read_csv(SRC_PATH, sep='\t')
    data = clean_data(data)
    return data


def clean_data(data):
    data = data[data.Type != 'noise']
    data = data[data.Type != 'bad']
    data = data[all_features]
    return data


def select_methods():
    data = load_data()
    #print(data["SimpleReadability"])
    data[used_features] = data[used_features].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
    #print(data["SimpleReadability"])
    data['Readability'] = data['Readability'].apply(lambda x: x * -1)
    data['SimpleReadability'] = data['SimpleReadability'].apply(lambda x: x * -1)
    data['CommentCodeRation'] = data['CommentCodeRation'].apply(lambda x: x * -1)
    #print(data["SimpleReadability"])

    data['Sum'] = data[used_features].sum(axis=1)
    sorted_data = data.sort_values(by='Sum')
    #print (data)

    count_projects = {}
    fw = open(DEST_PATH + "ugly_surprising.csv", "w")
    fw.write("Project\tMethod\tScore\tType\n")
    for index, row in sorted_data.iterrows():
        print(row['Sum'], row['Type'], row['Project'], row['file'])
        if row['Type'] == 'ugly':
            if row['Project'] not in count_projects:
                count_projects[row['Project']] = 1
            elif count_projects[row['Project']] >= 2:
                continue
            else:
                count_projects[row['Project']] += 1

            fw.write(row['Project'] + "\t" + row['file'] + "\t" + str(row['Sum']) +
                     "\t" + row['Type'] + "\n")
    fw.close()

    count_projects = {}
    fw = open(DEST_PATH + "good_surprising.csv", "w")
    fw.write("Project\tMethod\tScore\tType\n")
    print("################")
    sorted_data = data.sort_values(by='Sum', ascending=False)
    # print (data)
    for index, row in sorted_data.iterrows():
        print(row['Sum'], row['Type'], row['Project'], row['file'])
        if row['Type'] == 'good':
            if row['Project'] not in count_projects:
                count_projects[row['Project']] = 1
            elif count_projects[row['Project']] >= 2:
                continue
            else:
                count_projects[row['Project']] += 1
            fw.write(row['Project'] + "\t" + row['file'] + "\t" + str(row['Sum']) +
                     "\t" + row['Type'] + "\n")
    fw.close()


if __name__ == "__main__":
    select_methods()
